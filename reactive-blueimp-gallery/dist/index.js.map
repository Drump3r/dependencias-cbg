{"version":3,"sources":["../components/ReactBlueImpGallery/index.js"],"names":["ReactBlueImpGallery","props","id","state","instance","onopenCallback","slidesByKey","options","inlineCarousel","_setInstance","bind","setState","propOptions","onopen","setTimeout","_onOpen","document","getElementById","getElementsByTagName","Object","assign","container","carousel","setInstance","gal","onclick","event","window","target","srcElement","link","getAttribute","parentNode","index","links","opts","_getElements","_getControls","f","reactGallery","className","children","source","visibility","elementsVisibilityStyle","customClassName","DEFAULT_CLASS_NAME","length","map","src","child","key","cloneElement","withControls","overlays","withControlsClass","inlineCarouselClass","classNames","noClose","Component","propTypes","string","bool","object","any","array","defaultProps","Slide","Overlays"],"mappings":"ktCAYA,4K,0rBAKMA,oB,aACJ,aAAmB,iHACXC,CADW,KAGFA,CAHE,CAGTC,EAHS,OAKjB,GAAKC,KAAL,CAAa,CAEXC,SAAU,IAFC,CAIXF,GAAIA,GAAM,+BAJC,CAOXG,eAAgB,IAPL,CALI,CAgBjB,EAAKC,WAAL,GAhBiB,EAiBlB,C,iGAEmB,cAId,KAAKL,KAJS,KAEhBM,OAFgB,KAGhBC,cAHgB,GAMH,KAAKL,KANF,CAMVD,EANU,CAOZ,MAAgBA,CAPJ,CAQZ,EAAcK,CARF,CASZ,EAAc,KAAKE,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CATF,CAiBlB,GALA,KAAKC,QAAL,CAAc,CAAEN,eAAgBO,EAAYC,MAA9B,CAAd,CAKA,CAHAD,EAAYC,MAAZ,CAAqB,iBAAMC,YAAW,EAAKC,OAAL,CAAaL,IAAb,GAAX,CAAN,CAGrB,CAAIF,CAAJ,CAAoB,CAClB,GAAM,GAAM,6BACVQ,SAASC,cAAT,CAA2Bf,CAA3B,WAAuCgB,oBAAvC,CAA4D,GAA5D,CADU,CAEVC,OAAOC,MAAP,IAAkB,CAChBC,UAAWA,CADK,CAEhBC,WAFgB,CAAlB,CAGGV,CAHH,CAFU,CAAZ,CAOAW,EAAYC,CAAZ,CACD,CATD,IAUER,UAASC,cAAT,CAA2Bf,CAA3B,WAAuCuB,OAAvC,CAAiD,WAAiB,CAChE,EAAQC,GAASC,OAAOD,KADwC,KAEhE,GAAM,GAASA,EAAME,MAAN,EAAgBF,EAAMG,UAArC,CACI,EAAOD,CAHqD,CAKzD,CAACE,EAAKC,YAAL,CAAkB,cAAlB,CALwD,EAM9D,EAAOD,EAAKE,UAAZ,CAEF,GAAM,GAAQ,KAAKd,oBAAL,CAA0B,GAA1B,CAAd,CACM,EAAOC,OAAOC,MAAP,IAAkB,CAC7Ba,MAAOH,CADsB,CAE7BJ,MAAOA,CAFsB,CAG7BL,UAAWA,CAHkB,CAAlB,CAIVT,CAJU,CADb,CAMM,EAAM,6BAAQsB,CAAR,CAAeC,CAAf,CANZ,CAOAZ,EAAYC,CAAZ,CACD,CAEJ,C,uCAEQ,CACP,MACE,0CACI,KAAKY,YAAL,EADJ,CAEI,KAAKC,YAAL,EAFJ,CAKH,C,yCAES,OAIJ,KAAKlC,KAJD,KAENE,cAFM,KAGND,QAHM,CAOR,CADqBC,GAAmB,kBAAKiC,EAAL,CACxC,EAAalC,CAAb,CACD,C,oDAEsB,CAGrBA,EAASmC,YAAT,CAAwB,IAHH,CAKrB,KAAK5B,QAAL,CAAc,CAAEP,SAAUA,CAAZ,CAAd,CACD,C,mDAEc,cAMT,KAAKH,KANI,KAEXO,cAFW,KAGXgC,SAHW,KAIXC,QAJW,KAKXC,MALW,GAQE,KAAKvC,KARP,CAQLD,EARK,CASP,EAA0BM,EAAiB,CAAEmC,WAAY,QAAd,CAAjB,GATnB,CAUP,EAAkBH,EAAeA,CAAf,eAAwC,EAVnD,CAYb,MACE,sCAAK,GAAOtC,CAAP,SAAL,CAAwB,MAAO0C,CAA/B,CAAwD,UAAcC,CAAd,KAAiC,iBAAUC,kBAA3C,cAAxD,EAEIJ,EAAOK,MAAP,CACAL,EAAOM,GAAP,CAAW,WAAS,CAClB,MACE,2DAAYC,CAAZ,EAAkB,IAAMA,EAAIP,MAA5B,GAEH,CAJD,CADA,CAOAD,EAASO,GAAT,CAAa,WAAW,CACtB,GAAM,GAAME,EAAMC,GAAN,EAAa,yBAAcD,EAAMjD,KAApB,CAAzB,CAEA,MADA,GAAKK,WAAL,CAAiB6C,CAAjB,EAAwBD,CACxB,CAAO,gBAAME,YAAN,CAAmBF,CAAnB,CAA0B,CAAEC,KAAF,CAAO,WAAYA,CAAnB,CAA1B,CACR,CAJD,CATJ,CAkBH,C,mDAEc,OAMT,KAAKlD,KANI,KAEXoD,YAFW,KAGX7C,cAHW,KAIXgC,SAJW,KAKXc,QALW,GAQE,KAAKnD,KARP,CAQLD,EARK,CASP,EAAoBmD,EAAe,0BAAf,CAA4C,EATzD,CAUP,EAAsB7C,EAAiB,0BAAjB,CAA8C,EAV7D,CAWP,EAAgB+C,CAAhB,KAAqCC,CAArC,KAA4DhB,CAA5D,KAAyE,iBAAUM,kBAX5E,CAab,MAAOQ,GACL,gBAAMF,YAAN,CAAmBE,CAAnB,CAA6B,CAC3Bd,WAAcc,EAASrD,KAAT,CAAeuC,SAAf,EAA4B,EAA1C,MAAgDiB,CADrB,CAE3BvD,GAAIA,CAFuB,CAG3BwD,QAASlD,CAHkB,CAA7B,CADK,CAOL,kDAAU,GAAIN,CAAd,CAAkB,UAAWuD,CAA7B,CAAyC,QAASjD,CAAlD,EACH,C,OApJ+B,gBAAMmD,S,EAuJxC3D,oBAAoB4D,SAApB,CAAgC,CAC9B1D,GAAI,oBAAU2D,MADgB,CAE9BR,aAAc,oBAAUS,IAFM,CAG9BtD,eAAgB,oBAAUsD,IAHI,CAI9BvD,QAAS,oBAAUwD,MAJW,CAK9BvB,UAAW,oBAAUqB,MALS,CAM9BP,SAAU,oBAAUU,GANU,CAO9BtB,OAAQ,oBAAUuB,KAPY,C,CAUhCjE,oBAAoBkE,YAApB,CAAmC,CACjChE,GAAI,IAD6B,CAEjCmD,eAFiC,CAGjC7C,iBAHiC,CAIjCD,UAJiC,CAKjCiC,UAAW,EALsB,CAMjCc,SAAU,IANuB,CAOjCZ,SAPiC,C,CAUnC1C,oBAAoBmE,KAApB,gB,CACAnE,oBAAoBoE,QAApB,mB,iBAEepE,mB","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Gallery from 'blueimp-gallery';\n\nimport 'blueimp-gallery-path/js/blueimp-gallery-video.js';\nimport 'blueimp-gallery-path/js/blueimp-gallery-youtube.js';\nimport 'blueimp-gallery-path/js/blueimp-gallery-vimeo.js';\nimport 'blueimp-gallery-path/js/blueimp-gallery-indicator.js';\nimport 'blueimp-gallery-path/js/blueimp-gallery-fullscreen.js';\nimport 'blueimp-gallery-path/css/blueimp-gallery.min.css';\n\nimport './ReactFactory';\nimport Slide from './Slide';\nimport Overlays from './Overlays';\nimport { get_safe_html_uuid, object_to_key, constants } from './utils';\n\n\nclass ReactBlueImpGallery extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { id } = props;\n\n    this.state = {\n      // lets store the original BlueImp gallery instance.\n      instance: null,\n      // the id for the html elements.\n      id: id || get_safe_html_uuid(),\n      // here we'll save the custom onopen callback to be\n      // called internally with an instance of ReactBlueImpGallery.\n      onopenCallback: null,\n    };\n    // a reference to Slide components useful to render\n    // slides with ReactFactory.\n    this.slidesByKey = {};\n  }\n\n  componentDidMount() {\n    const {\n      options,\n      inlineCarousel,\n    } = this.props;\n\n    const { id } = this.state;\n    const container = `#${id}`;\n    const propOptions = options;\n    const setInstance = this._setInstance.bind(this);\n\n    // stores custom event listener\n    this.setState({ onopenCallback: propOptions.onopen });\n    // overwrites with internal onopen handler\n    propOptions.onopen = () => setTimeout(this._onOpen.bind(this));\n\n    // initialization of galleries taken from official BlueImp documentation.\n    if (inlineCarousel) {\n      const gal = Gallery( // eslint-disable-line new-cap\n        document.getElementById(`${id}-links`).getElementsByTagName('a'),\n        Object.assign({}, {\n          container: container,\n          carousel: true,\n        }, propOptions)\n      );\n      setInstance(gal);\n    } else {\n      document.getElementById(`${id}-links`).onclick = function (event) {\n        event = event || window.event;\n        const target = event.target || event.srcElement;\n        let link = target;\n        // link detection based on an allways present data-trigger attribute\n        while (!link.getAttribute('data-trigger')) {\n          link = link.parentNode;\n        }\n        const links = this.getElementsByTagName('a');\n        const opts = Object.assign({}, {\n          index: link,\n          event: event,\n          container: container,\n        }, propOptions);\n        const gal = Gallery(links, opts); // eslint-disable-line new-cap\n        setInstance(gal);\n      };\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        { this._getElements() }\n        { this._getControls() }\n      </div>\n    );\n  }\n\n  _onOpen() {\n    const {\n      onopenCallback,\n      instance,\n    } = this.state;\n\n    const openCallback = onopenCallback || (f => f);\n    openCallback(instance);\n  }\n\n  _setInstance(instance) {\n    // gives to Gallery a reference to ReactBlueImpGallery,\n    // needed on ReactFactory slides\n    instance.reactGallery = this;\n    // stores Gallery into ReactBlueImpGallery\n    this.setState({ instance: instance });\n  }\n\n  _getElements() {\n    const {\n      inlineCarousel,\n      className,\n      children,\n      source,\n    } = this.props;\n\n    const { id } = this.state;\n    const elementsVisibilityStyle = inlineCarousel ? { visibility: 'hidden' } : {};\n    const customClassName = className ? `${className}-thumbnails` : '';\n\n    return (\n      <div id={`${id}-links`} style={elementsVisibilityStyle} className={`${customClassName} ${constants.DEFAULT_CLASS_NAME}-thumbnails`}>\n\n        { source.length ?\n          source.map((src) => {\n            return (\n              <Slide { ...src } key={ src.source } />\n            );\n          })\n          :\n          children.map((child) => {\n            const key = child.key || object_to_key(child.props);\n            this.slidesByKey[key] = child;\n            return React.cloneElement(child, { key, 'data-key': key });\n          })\n        }\n\n      </div>\n    );\n  }\n\n  _getControls() {\n    const {\n      withControls,\n      inlineCarousel,\n      className,\n      overlays,\n    } = this.props;\n\n    const { id } = this.state;\n    const withControlsClass = withControls ? 'blueimp-gallery-controls' : '';\n    const inlineCarouselClass = inlineCarousel ? 'blueimp-gallery-carousel' : '';\n    const classNames = `${withControlsClass} ${inlineCarouselClass} ${className} ${constants.DEFAULT_CLASS_NAME}`;\n\n    return overlays ?\n      React.cloneElement(overlays, {\n        className: `${overlays.props.className || ''} ${classNames}`,\n        id: id,\n        noClose: inlineCarousel,\n      })\n    :\n      <Overlays id={id} className={classNames} noClose={inlineCarousel} />;\n  }\n}\n\nReactBlueImpGallery.propTypes = {\n  id: PropTypes.string,\n  withControls: PropTypes.bool,\n  inlineCarousel: PropTypes.bool,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  overlays: PropTypes.any,\n  source: PropTypes.array,\n};\n\nReactBlueImpGallery.defaultProps = {\n  id: null,\n  withControls: false,\n  inlineCarousel: false,\n  options: {},\n  className: '',\n  overlays: null,\n  source: [],\n};\n\nReactBlueImpGallery.Slide = Slide;\nReactBlueImpGallery.Overlays = Overlays;\n\nexport default ReactBlueImpGallery;\n"]}