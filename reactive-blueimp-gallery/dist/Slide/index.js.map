{"version":3,"sources":["../../components/ReactBlueImpGallery/Slide/index.js"],"names":["nextListeners","subscribe","listener","Error","push","isSubscribed","indexOf","splice","index","Connect","props","state","unsubscribe","setState","data","cloneElement","wrappedComponent","Component","propTypes","object","Slide","nextProps","synchedData","forEach","s","source","href","thumbnail","title","poster","type","template","children","Object","assign","src","_title","string","any","defaultProps"],"mappings":"k8CAKA,GAAMA,iBAAN,CACA,QAASC,UAAT,GAA6B,CAC3B,GAAwB,UAApB,QAAOC,EAAX,CACE,KAAM,IAAIC,MAAJ,CAAU,qCAAV,CAAN,CAGF,GAAI,KAAJ,CAIA,MAFAH,eAAcI,IAAd,CAAmBF,CAAnB,CAEA,CAAO,UAAuB,CAC5B,GAAKG,CAAL,EAIA,IAJA,CAMA,GAAM,GAAQL,cAAcM,OAAd,CAAsBJ,CAAtB,CAAd,CACAF,cAAcO,MAAd,CAAqBC,CAArB,CAA4B,CAA5B,CAPA,CAQD,CACF,C,GAKKC,Q,aAEJ,aAAmB,iHACXC,CADW,SAEjB,GAAKC,KAAL,GAFiB,EAGlB,C,mGAEoB,YACnB,KAAKC,WAAL,CAAmBX,UAAU,WAAU,CACrC,EAAKY,QAAL,aAAmBC,CAAnB,EACD,CAFkB,CAGpB,C,mEAEsB,CACrB,KAAKF,WAAL,EACD,C,uCAEQ,CACP,MAAO,iBAAMG,YAAN,CAAmB,KAAKL,KAAL,CAAWM,gBAA9B,aAAqD,KAAKL,KAA1D,EACR,C,OAnBmB,gBAAMM,S,EAsB5BR,QAAQS,SAAR,CAAoB,CAAEF,iBAAkB,oBAAUG,MAA9B,C,IAIdC,M,0QAEiC,CAC/BC,EAAUC,WAAV,GAA0B,KAAKZ,KAAL,CAAWY,WADN,EAEjCtB,cAAcuB,OAAd,CAAsB,kBAAKC,GAAEH,EAAUC,WAAZ,CAAL,CAAtB,CAEH,C,uCAEQ,OAYH,KAAKZ,KAZF,KAELe,MAFK,KAGLC,IAHK,KAILC,SAJK,KAKLC,KALK,KAMLC,MANK,KAOLC,IAPK,KAQLC,QARK,KASLC,QATK,KAULV,WAVK,yHAcD,EAAMG,GAAUC,CAAV,EAAkBC,CAdvB,CAgBD,EAASC,CAhBR,CAiBP,MAAOG,GACL,gBAAMhB,YAAN,CAAmBgB,CAAnB,aAAkCE,OAAOC,MAAP,IAAkBxB,CAAlB,qBAAlC,EADK,CAGH,4CAAG,KAAMyB,CAAT,CAAc,MAAOC,CAArB,CAA6B,KAAMN,CAAnC,EAA6CG,OAAOC,MAAP,IAAkBxB,CAAlB,qBAA7C,EACI,qCAAK,IANFiB,GAAaE,CAAb,EAAuBM,CAM1B,CAAc,IAAKC,CAAnB,EADJ,CAIL,C,OAhCiB,gBAAMnB,S,EAmC1BG,MAAMF,SAAN,CAAkB,CAChBO,OAAQ,oBAAUY,MADF,CAEhBX,KAAM,oBAAUW,MAFA,CAGhBV,UAAW,oBAAUU,MAHL,CAIhBR,OAAQ,oBAAUQ,MAJF,CAKhBT,MAAO,oBAAUS,MALD,CAMhBP,KAAM,oBAAUO,MANA,CAOhBN,SAAU,oBAAUO,GAPJ,CAQhBhB,YAAa,oBAAUH,MARP,C,CAWlBC,MAAMmB,YAAN,CAAqB,CACnBd,OAAQ,IADW,CAEnBC,KAAM,IAFa,CAGnBC,UAAW,IAHQ,CAInBE,OAAQ,IAJW,CAKnBD,MAAO,EALY,CAMnBE,KAAM,YANa,CAOnBC,SAAU,IAPS,CAQnBT,cARmB,C,CAWrBF,MAAMX,OAAN,CAAgBA,O,iBAEDW,K","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// We'll add components to a listener queue to be notified\n// on changes in synched data.\nconst nextListeners = [];\nfunction subscribe(listener) {\n  if (typeof listener !== 'function') {\n    throw new Error('Expected listener to be a function.');\n  }\n\n  let isSubscribed = true;\n\n  nextListeners.push(listener);\n\n  return function unsubscribe() {\n    if (!isSubscribed) {\n      return;\n    }\n\n    isSubscribed = false;\n\n    const index = nextListeners.indexOf(listener);\n    nextListeners.splice(index, 1);\n  };\n}\n\n// Helper to wrapp components which was rendered into\n// slide with ReactFactory. Connect subscribes to synchedData updates\n// and renders wrapped component with new data.\nclass Connect extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentWillMount() {\n    this.unsubscribe = subscribe((data) => {\n      this.setState({ ...data });\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    return React.cloneElement(this.props.wrappedComponent, { ...this.state });\n  }\n}\n\nConnect.propTypes = { wrappedComponent: PropTypes.object };\n\n// Slide represents both thumbnail and content of an slide,\n// but only renders thumbanils with proper config to BlueImp gallery.\nclass Slide extends React.Component {\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.synchedData !== this.props.synchedData) {\n      nextListeners.forEach(s => s(nextProps.synchedData));\n    }\n  }\n\n  render() {\n    const {\n      source,\n      href,\n      thumbnail,\n      title,\n      poster,\n      type,\n      template,\n      children, // eslint-disable-line no-unused-vars\n      synchedData, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n\n    const src = source || href || thumbnail;\n    const tn = thumbnail || poster || src;\n    const _title = title;\n    return template ?\n      React.cloneElement(template, { ...Object.assign({}, props, { 'data-trigger' : true }) })\n    : (\n        <a href={src} title={_title} type={type} {...Object.assign({}, props, { 'data-trigger': true })}>\n            <img src={tn} alt={_title} />\n        </a>\n      );\n  }\n}\n\nSlide.propTypes = {\n  source: PropTypes.string,\n  href: PropTypes.string,\n  thumbnail: PropTypes.string,\n  poster: PropTypes.string,\n  title: PropTypes.string,\n  type: PropTypes.string,\n  template: PropTypes.any,\n  synchedData: PropTypes.object,\n};\n\nSlide.defaultProps = {\n  source: null,\n  href: null,\n  thumbnail: null,\n  poster: null,\n  title: '',\n  type: 'image/jpeg',\n  template: null,\n  synchedData: {},\n};\n\nSlide.Connect = Connect;\n\nexport default Slide;\n"]}